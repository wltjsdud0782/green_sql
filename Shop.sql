-- 쇼핑몰 프로젝트 테이블


-- 회원 정보 테이블
CREATE TABLE SHOP_MEMBER (
	MEMBER_ID VARCHAR(20) PRIMARY KEY
	, MEMBER_PW VARCHAR(20) NOT NULL
	, MEMBER_NAME VARCHAR(20) NOT NULL
	, GENDER VARCHAR(10) NOT NULL -- male, female
	, MEMBER_EMAIL VARCHAR(50) NOT NULL UNIQUE
	, MEMBER_TEL VARCHAR(20) -- 010-1111-2222
	, MEMBER_ADDR VARCHAR(50)
	, ADDR_DETAIL VARCHAR(50)
	, POST_CODE VARCHAR(10) -- 49060
	, JOIN_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
	, MEMBER_ROLL VARCHAR(20) DEFAULT 'USER' -- 권한 user , admin
);

SELECT * FROM shop_member;
DELETE FROM shop_member WHERE MEMBER_ID = 'as1';
UPDATE shop_member SET member_roll = 'ADMIN' WHERE member_id = 'admin';

-- 상품 카테고리 정보 테이블
CREATE TABLE ITEM_CATEGORY(
	CATE_CODE INT AUTO_INCREMENT PRIMARY KEY
	, CATE_NAME VARCHAR(50) NOT NULL UNIQUE
);

INSERT INTO item_category VALUES(1, 'IT/인터넷');
INSERT INTO item_category VALUES(2, '소설/에세이');
INSERT INTO item_category VALUES(3, '문화/여행');
COMMIT;

-- 상품 정보 테이블
CREATE TABLE SHOP_ITEM(
	ITEM_CODE INT AUTO_INCREMENT PRIMARY KEY
	, ITEM_NAME VARCHAR(50) NOT NULL UNIQUE -- 상품명
	, ITEM_PRICE INT NOT NULL -- 가격
	, ITEM_STOCK INT DEFAULT 10 -- 재고
	, ITEM_INTRO VARCHAR(100) -- 책 소개
	, REG_DATE DATETIME DEFAULT CURRENT_TIMESTAMP -- 카테고리명
	, CATE_CODE INT NOT NULL REFERENCES item_category (CATE_CODE)
);

ALTER TABLE shop_item ADD COLUMN ITEM_STATUS INT DEFAULT 1; -- 상품 상태 컬럼 추가
-- 준비중:1 / 판매중:2 / 매진:3
ALTER TABLE shop_item DROP COLUMN ITEM_STATUS;

SELECT * FROM shop_item;
UPDATE shop_item SET ITEM_STATUS = 2;

-- 상품 이미지 정보 관리 테이블
CREATE TABLE ITEM_IMAGE (
   IMG_CODE INT AUTO_INCREMENT PRIMARY KEY
   , ORIGIN_FILE_NAME VARCHAR(100) NOT NULL
   , ATTACHED_FILE_NAME VARCHAR(100) NOT NULL
   , IS_MAIN VARCHAR(2) NOT NULL -- 'Y', 'N' 메인 이미지냐 아니냐
   , ITEM_CODE INT NOT NULL REFERENCES shop_item (ITEM_CODE)
);

-- 다중 등록
INSERT INTO ITEM_IMAGE () VALUES 
(1, 'aa.jpg', 'aaa.jpg', 'Y', 1)
, (2, 'bb.jpg', 'bbb,jpg', 'N', 1)
, (3, 'cc.jpg', 'ccc.jpg', 'N', 1);

SELECT * FROM item_image;

COMMIT;

-- 장바구니 정보 테이블 (상품명, 가격, 갯수, 총가격)
CREATE TABLE SHOP_CART (
   CART_CODE INT AUTO_INCREMENT PRIMARY KEY
   , ITEM_CODE INT NOT NULL REFERENCES shop_item (ITEM_CODE)
   , MEMBER_ID VARCHAR(20) NOT NULL REFERENCES shop_member (MEMBER_ID)
   , CART_CNT INT NOT NULL -- 장바구니에 담은 수량
   , CART_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
);

DELETE FROM shop_cart;
DELETE FROM shop_cart WHERE CART_CODE IN (1,2,3);
-- 상품 이름, 가격, 수량, 총값
SELECT SI.ITEM_NAME
   , SI.ITEM_PRICE
   , CART_CNT
   , (ITEM_PRICE * CART_CNT) AS TOTAL_PRICE
FROM SHOP_CART SC INNER JOIN shop_item SI
ON SC.ITEM_CODE = SI.ITEM_CODE;

-- 회원 아이디가 'JAVA' 인 회원의 장바구니에 담긴 상품 목록의         !!!! 여러개의 INNER JOIN !!!!
-- 장바구니코드, 대표이미지명, 상품명, 가격, 개수, 총가격
SELECT CART_CODE
   , ATTACHED_FILE_NAME
   , ITEM.ITEM_NAME
   , ITEM.ITEM_PRICE
   , CART_CNT
   , (ITEM_PRICE * CART_CNT) AS TOTAL_PRICE
FROM SHOP_CART CART
INNER JOIN shop_item ITEM
ON CART.ITEM_CODE = ITEM.ITEM_CODE
INNER JOIN item_image IMG
ON CART.ITEM_CODE = IMG.ITEM_CODE
WHERE MEMBER_ID = 'JAVA'
AND IS_MAIN = 'Y';

-- ------------------------------------------------------------------------------- 쿼리 한 개
-- 장바구니와 관련된 모든 정보를 조회할 수 있는 VIEW 생성
CREATE OR REPLACE VIEW CART_VIEW
AS
SELECT CART_CODE
   , CART.ITEM_CODE
   , CART.MEMBER_ID
   , CART_CNT
   , CART_DATE
   
   , ITEM_NAME
   , ITEM_PRICE
   , ITEM_INTRO
   , (ITEM_PRICE * CART_CNT) AS TOTAL_PRICE
   
   , MEMBER_NAME
   , MEMBER_TEL
   , CONCAT(POST_CODE, ' ', MEMBER_ADDR, ' ', ADDR_DETAIL) AS ADDRESS
   
   , ATTACHED_FILE_NAME
   , ORIGIN_FILE_NAME
   , IS_MAIN
   , IMG_CODE
   
   , ITEM.CATE_CODE
   , CATE_NAME
   
FROM SHOP_CART CART

INNER JOIN shop_item ITEM
ON CART.ITEM_CODE = ITEM.ITEM_CODE

INNER JOIN shop_member MEMBER
ON CART.MEMBER_ID = MEMBER.MEMBER_ID

INNER JOIN item_image IMG
ON ITEM.ITEM_CODE = IMG.ITEM_CODE

INNER JOIN item_category CATE
ON ITEM.CATE_CODE = CATE.CATE_CODE

WHERE IS_MAIN = 'Y';
-- -------------------------------------------------------------------------------------------------
SELECT * FROM cart_view;
   
   
SELECT POST_CODE
   , MEMBER_ADDR
   , ADDR_DETAIL
   , CONCAT(POST_CODE, ' ', MEMBER_ADDR, ' ', ADDR_DETAIL)
FROM shop_member;

-- 다음에 들어갈 ITEM_CODE 조회
-- 현재 등록된 ITEM_CODE 중 가장 큰 값 + 1
SELECT IFNULL(MAX(ITEM_CODE) ,0) + 1 FROM shop_item;

SELECT COMM, IFNULL(COMM, 0) FROM emp;

-- 상품 상세 정보 조회
SELECT *
FROM shop_item SI INNER JOIN item_image II
ON SI.ITEM_CODE = II.ITEM_CODE
WHERE SI.ITEM_CODE = 1;

-- 구매 정보 테이블
CREATE TABLE SHOP_BUY(
   BUY_CODE INT AUTO_INCREMENT PRIMARY KEY
   , MEMBER_ID VARCHAR(20) NOT NULL REFERENCES shop_member (MEMBER_ID)
   , BUY_PRICE INT NOT NULL
   , BUY_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- 구매 상세 정보 테이블
CREATE TABLE BUY_DETAIL (
   BUY_DETAIL_CODE INT AUTO_INCREMENT PRIMARY KEY
   , ITEM_CODE INT NOT NULL REFERENCES shop_item (ITEM_CODE)
   , BUY_CNT INT NOT NULL
   , TOTAL_PRICE INT NOT NULL
   , BUY_CODE INT NOT NULL REFERENCES SHOP_BUY (BUY_CODE)
);

SELECT ITEM_CODE
   , CART_CNT
   , TOTAL_PRICE
FROM CART_VIEW
WHERE CART_CODE IN ( (SELECT CART_CODE FROM shop_cart WHERE cart_view.ITEM_CODE) );

-- BUY_CODE 정해주기
SELECT IFNULL(MAX(BUY_CODE), 0) + 1
FROM shop_buy;

DELETE FROM shop_buy;
DELETE FROM buy_detail;

-- 구매 날짜 및 총 구매 금액
SELECT BUY_DATE
   , BUY_PRICE
FROM shop_buy
ORDER BY BUY_DATE DESC;

-- 상품 코드, 상품명, 대표이미지명, 구매수량, 구매 가격 >> JOIN 방법과 서브쿼리 방법
SELECT BD.BUY_CODE
   , BD.ITEM_CODE
   , BUY_CNT
   , TOTAL_PRICE
   , ITEM_NAME
   , ATTACHED_FILE_NAME
   , BUY_DATE
   , BUY_PRICE
FROM buy_detail BD
INNER JOIN shop_item ITEM
ON BD.ITEM_CODE = ITEM.ITEM_CODE
INNER JOIN item_image IMG
ON BD.ITEM_CODE = IMG.ITEM_CODE
INNER JOIN shop_buy BUY
ON BD.BUY_CODE = BUY.BUY_CODE
WHERE IS_MAIN = 'Y' AND MEMBER_ID = 'kakao';

SELECT BUY_CODE
   , ITEM_CODE
   , BUY_CNT
   , TOTAL_PRICE
   , (SELECT ITEM_NAME FROM shop_item WHERE ITEM_CODE = BD.ITEM_CODE) ITEM_NAME
   , (SELECT ATTACHED_FILE_NAME FROM item_image WHERE ITEM_CODE = BD.ITEM_CODE AND IS_MAIN = 'Y') ATTACHED_FILE_NAME
   , (SELECT BUY_DATE FROM shop_buy WHERE BUY_CODE = BD.BUY_CODE) BUY_DATE
   , (SELECT BUY_PRICE FROM shop_buy WHERE BUY_CODE = BD.BUY_CODE) BUY_PRICE
FROM buy_detail BD;
-- -----------------------------------------------------------------------------
-- DATETIME 자료형 WHERE 절 만들기
SELECT
*
FROM shop_buy
WHERE MEMBER_ID LIKE '%A%'
AND DATE_FORMAT(BUY_DATE, '%Y-%m-%d') >= '2024-02-05'
AND DATE_FORMAT(BUY_DATE, '%Y-%m-%d') <= '2024-02-15'
ORDER BY BUY_DATE DESC;

SELECT * FROM shop_buy
WHERE DATE_FORMAT(BUY_DATE, '%Y-%m-%d') = '2024-02-02';

-- 문자열 → 날짜
SELECT
   STR_TO_DATE('2000-01-01', BUY_DATE)
FROM shop_buy;

-- 날짜 → 문자열
SELECT
   DATE_FORMAT(BUY_DATE, '%Y-%m-%d')
   , DATE_FORMAT(BUY_DATE, '%Y-%m-%d %h:%i:%s')
FROM shop_buy;

-- 준비중:1 / 판매중:2 / 매진:3
SELECT ITEM_CODE
   , ITEM_NAME
   , ITEM_STOCK
   , ITEM_STATUS
   , IF(ITEM_STATUS=1, '준비중', IF(ITEM_STATUS=2, '판매중', '매진')) '상태'
   , CASE
      WHEN ITEM_STATUS=1 THEN '준비중'
      WHEN ITEM_STATUS=2 THEN '판매중'
      ELSE '매진'
      END '상태2'
FROM shop_item;